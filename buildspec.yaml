version: 0.2

env:
  variables:
    # This S3 bucket will be used to store the packaged Lambda deployment bundle.
    # Make sure to provide a valid S3 bucket name (it must exist already).
    # The AWS CodeBuild IAM role must allow write access to it.
    S3_BUCKET: "br.com.likwi.artifacts.apps.backend-site-dev"
    PACKAGE: "backend-site"

phases:

  install:
#    runtime-versions:
#      golang: 1.20
    commands:

      # AWS Codebuild Go images use /go for the $GOPATH so let's copy our
      # application source code into that directory structure.
      - mkdir -p "/go/src/$(dirname ${PACKAGE})"
      - ln -s "${CODEBUILD_SRC_DIR}" "/go/src/${PACKAGE}"

      # Print all environment variables (handy for AWS CodeBuild logs)
      - env

      # Install golint
      # - go get -u github.com/golang/lint/golint

  pre_build:
    commands:

      - echo setting GOXX variables ðŸ––
      - GOOS=linux
      - GOARCH=amd64
      - CGO_ENABLED=0
      - echo ðŸš€ -> ðŸª£
      - go mod tidy

      # Make sure we're in the project directory within our GOPATH
#      - cd "/go/src/${PACKAGE}"


      # Fetch all dependencies
      - go get -t ./...

      # Ensure code passes all lint tests
#      - golint -set_exit_status

      # Check the Go code for common problems with 'go vet'
      - go vet ./...

      # Run all tests included with our application
      - go test ./...


  build:
    commands:
      # Build our go application
      - go build main.go

      # Package our application with AWS SAM
      - aws cloudformation package --template-file template.yaml --s3-bucket ${S3_BUCKET} --output-template-file packaged.yaml

artifacts:
  files:
    - packaged.yaml